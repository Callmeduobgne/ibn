#!/bin/bash

# Script n√¢ng cao ƒë·ªÉ d·ªçn d·∫πp c√°c file th·ª´a c√≤n l·∫°i
# T·∫°o b·ªüi: GitHub Copilot

echo "üîç Qu√©t s√¢u workspace ƒë·ªÉ t√¨m file th·ª´a c√≤n l·∫°i..."

WORKSPACE="/Users/luongxitin/Documents/blockchain"
TOTAL_FREED=0

# H√†m t√≠nh k√≠ch th∆∞·ªõc
get_size() {
    if [ -e "$1" ]; then
        du -sk "$1" | cut -f1
    else
        echo 0
    fi
}

echo ""
echo "üìã PH√ÇN T√çCH CHI TI·∫æT:"
echo "===================="

# 1. File Docker Compose r·ªóng
echo "üê≥ File Docker Compose r·ªóng:"
EMPTY_DOCKER=$(find "$WORKSPACE" -name "docker-compose*.yml" -empty)
if [ ! -z "$EMPTY_DOCKER" ]; then
    echo "$EMPTY_DOCKER" | while read file; do
        echo "  - $(basename "$file") (0 bytes)"
    done
    echo "  üí° Khuy·∫øn ngh·ªã: X√≥a c√°c file docker-compose r·ªóng"
else
    echo "  ‚úÖ Kh√¥ng c√≥ file docker-compose r·ªóng"
fi

echo ""

# 2. File .gitkeep kh√¥ng c·∫ßn thi·∫øt  
echo "üìÅ File .gitkeep:"
GITKEEP_FILES=$(find "$WORKSPACE" -name ".gitkeep")
if [ ! -z "$GITKEEP_FILES" ]; then
    echo "$GITKEEP_FILES" | wc -l | xargs echo "  T√¨m th·∫•y" | xargs echo "file .gitkeep"
    echo "  üí° File .gitkeep ch·ªâ ƒë·ªÉ gi·ªØ th∆∞ m·ª•c r·ªóng trong Git"
else
    echo "  ‚úÖ Kh√¥ng c√≥ file .gitkeep th·ª´a"
fi

echo ""

# 3. Gradle wrapper JAR tr√πng l·∫∑p
echo "‚òï Gradle wrapper JAR:"
GRADLE_JARS=$(find "$WORKSPACE" -name "gradle-wrapper.jar")
if [ ! -z "$GRADLE_JARS" ]; then
    GRADLE_COUNT=$(echo "$GRADLE_JARS" | wc -l)
    GRADLE_SIZE=$(echo "$GRADLE_JARS" | xargs du -ck | tail -1 | cut -f1)
    echo "  T√¨m th·∫•y $GRADLE_COUNT file gradle-wrapper.jar (t·ªïng $(( GRADLE_SIZE / 1024 ))MB)"
    echo "  üí° C√≥ th·ªÉ g·ªôp chung 1 file gradle-wrapper.jar"
else
    echo "  ‚úÖ Kh√¥ng c√≥ Gradle wrapper"
fi

echo ""

# 4. File bin tr√πng l·∫∑p gi·ªØa fabric-samples v√† fabric-ibn-network
echo "‚öôÔ∏è  Binary files tr√πng l·∫∑p:"
IBN_BIN="$WORKSPACE/fabric-ibn-network/bin"
SAMPLES_BIN="$WORKSPACE/fabric-samples/bin"

if [ -d "$IBN_BIN" ] && [ -d "$SAMPLES_BIN" ]; then
    echo "  üìÇ So s√°nh fabric-ibn-network/bin vs fabric-samples/bin:"
    
    # T√¨m file tr√πng t√™n
    for file in "$IBN_BIN"/*; do
        if [ -f "$file" ]; then
            filename=$(basename "$file")
            if [ -f "$SAMPLES_BIN/$filename" ]; then
                ibn_size=$(get_size "$file")
                samples_size=$(get_size "$SAMPLES_BIN/$filename")
                echo "    üîÑ $filename: Ibn($(( ibn_size / 1024 ))MB) vs Samples($(( samples_size / 1024 ))MB)"
            fi
        fi
    done
    
    echo "  üí° C√≥ th·ªÉ s·ª≠ d·ª•ng symlink thay v√¨ copy file"
fi

echo ""

# 5. File Markdown vƒÉn b·∫£n d·ª± √°n
echo "üìù File Markdown d·ª± √°n:"
MD_FILES=$(find "$WORKSPACE" -maxdepth 1 -name "*.md")
if [ ! -z "$MD_FILES" ]; then
    echo "$MD_FILES" | while read file; do
        size=$(get_size "$file")
        echo "  - $(basename "$file"): $(( size ))KB"
    done
else
    echo "  ‚úÖ Kh√¥ng c√≥ file Markdown ·ªü root"
fi

echo ""

# 6. File ·∫£nh/media
echo "üñºÔ∏è  File media:"
MEDIA_FILES=$(find "$WORKSPACE" -maxdepth 1 \( -name "*.jpg" -o -name "*.png" -o -name "*.gif" -o -name "*.pdf" \))
if [ ! -z "$MEDIA_FILES" ]; then
    echo "$MEDIA_FILES" | while read file; do
        size=$(get_size "$file")
        echo "  - $(basename "$file"): $(( size ))KB"
    done
else
    echo "  ‚úÖ Kh√¥ng c√≥ file media ·ªü root"
fi

echo ""
echo "üéØ KHUY·∫æN NGH·ªä D·ªåN D·∫∏P:"
echo "======================"

echo "1. üóëÔ∏è  C√≥ th·ªÉ x√≥a ngay:"
echo "   - File docker-compose r·ªóng (0 impact)"
echo "   - File .gitkeep (ch·ªâ c·∫ßn cho Git)"

echo ""
echo "2. üîó C√≥ th·ªÉ t·ªëi ∆∞u:"
echo "   - T·∫°o symlink cho binary files thay v√¨ copy"
echo "   - G·ªôp chung gradle-wrapper.jar"

echo ""
echo "3. üìÅ C·∫ßn review:"
echo "   - File Markdown c√≥ th·ªÉ move v√†o docs/"
echo "   - File ·∫£nh c√≥ th·ªÉ move v√†o assets/"

echo ""
echo "üöÄ Th·ª±c hi·ªán d·ªçn d·∫πp t·ª± ƒë·ªông? (y/n)"
read -p "Nh·∫≠p l·ª±a ch·ªçn: " choice

if [ "$choice" = "y" ] || [ "$choice" = "Y" ]; then
    echo ""
    echo "üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp t·ª± ƒë·ªông..."
    
    # X√≥a file docker-compose r·ªóng
    echo "üê≥ X√≥a file docker-compose r·ªóng..."
    REMOVED_DOCKER=0
    find "$WORKSPACE" -name "docker-compose*.yml" -empty | while read file; do
        rm -f "$file"
        echo "  ‚úÖ ƒê√£ x√≥a: $(basename "$file")"
        ((REMOVED_DOCKER++))
    done
    
    # T·∫°o th∆∞ m·ª•c docs n·∫øu ch∆∞a c√≥
    if [ ! -d "$WORKSPACE/docs" ]; then
        mkdir -p "$WORKSPACE/docs"
        echo "üìÅ T·∫°o th∆∞ m·ª•c docs/"
    fi
    
    # Move file Markdown v√†o docs (tr·ª´ README)
    for file in "$WORKSPACE"/*.md; do
        if [ -f "$file" ] && [ "$(basename "$file")" != "README.md" ]; then
            mv "$file" "$WORKSPACE/docs/"
            echo "  üìù ƒê√£ chuy·ªÉn $(basename "$file") v√†o docs/"
        fi
    done
    
    # T·∫°o th∆∞ m·ª•c assets n·∫øu c√≥ file ·∫£nh
    MEDIA_COUNT=$(find "$WORKSPACE" -maxdepth 1 \( -name "*.jpg" -o -name "*.png" -o -name "*.gif" \) | wc -l)
    if [ $MEDIA_COUNT -gt 0 ]; then
        mkdir -p "$WORKSPACE/assets"
        for file in "$WORKSPACE"/*.jpg "$WORKSPACE"/*.png "$WORKSPACE"/*.gif; do
            if [ -f "$file" ]; then
                mv "$file" "$WORKSPACE/assets/"
                echo "  üñºÔ∏è  ƒê√£ chuy·ªÉn $(basename "$file") v√†o assets/"
            fi
        done
    fi
    
    echo ""
    echo "‚úÖ Ho√†n th√†nh d·ªçn d·∫πp t·ª± ƒë·ªông!"
    
    # B√°o c√°o k·∫øt qu·∫£
    echo ""
    echo "üìä K·∫æT QU·∫¢:"
    echo "  üóëÔ∏è  File docker-compose r·ªóng: ƒê√£ x√≥a"
    echo "  üìÅ File Markdown: ƒê√£ chuy·ªÉn v√†o docs/"
    echo "  üñºÔ∏è  File ·∫£nh: ƒê√£ chuy·ªÉn v√†o assets/"
    
    echo ""
    echo "üìè C·∫•u tr√∫c workspace sau d·ªçn d·∫πp:"
    tree -L 2 "$WORKSPACE" 2>/dev/null || ls -la "$WORKSPACE"
    
else
    echo "‚ùå H·ªßy b·ªè d·ªçn d·∫πp t·ª± ƒë·ªông"
fi

echo ""
echo "‚ú® Ho√†n th√†nh qu√©t s√¢u workspace!"
